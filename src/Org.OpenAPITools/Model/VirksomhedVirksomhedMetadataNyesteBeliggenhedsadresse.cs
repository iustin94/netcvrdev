/*
 * cvr.dev API dokumentation
 *
 * # Introduktion Velkommen til [cvr.dev](https://cvr.dev)'s HTTP API dokumentation.  Dette dokument beskriver, hvordan du kan benytte vores API til at hente CVR-data. Vi henter og cacher data fra Virks CVR-database en gang i minuttet, så vi altid kan levere så nøjagtig data som muligt.  Udover at være beskrevet på denne sige, er vores API også [beskrevet i OpenAPI 3.0 format](https://docs.cvr.dev/cvrdev_openapi.yml) og som [Postman-dokumentation](https://documenter.getpostman.com/view/13435475/TVejiqUr).  For at benytte vores API skal du have en [cvr.dev-konto](https://cvr.dev/#/auth/signup) med et aktivt abonnement, som du kan [prøve gratis de første 30 dage](https://cvr.dev/#/prices). 
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse
    /// </summary>
    [DataContract(Name = "Virksomhed_virksomhedMetadata_nyesteBeliggenhedsadresse")]
    public partial class VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse" /> class.
        /// </summary>
        /// <param name="adresseId">DAWA adresse id. Vil kun eksistere for danske adresser. Se https://dawadocs.dataforsyningen.dk/dok/api/adresse#opslag for mere information. Bonus information: DAWA id&#39;er er unikke for _den givne fysiske lokation_ og ændrer sig ikke, hvis eksempelvis vejen omdøbes eller bliver tilknyttet en ny kommune. .</param>
        /// <param name="bogstavFra">bogstavFra (required).</param>
        /// <param name="bogstavTil">bogstavTil (required).</param>
        /// <param name="bynavn">bynavn (required).</param>
        /// <param name="conavn">conavn (required).</param>
        /// <param name="etage">etage (required).</param>
        /// <param name="fritekst">fritekst (required).</param>
        /// <param name="husnummerFra">husnummerFra (required).</param>
        /// <param name="husnummerTil">husnummerTil (required).</param>
        /// <param name="kommune">kommune (required).</param>
        /// <param name="landekode">landekode (required).</param>
        /// <param name="periode">periode (required).</param>
        /// <param name="postboks">postboks (required).</param>
        /// <param name="postdistrikt">postdistrikt (required).</param>
        /// <param name="postnummer">postnummer (required).</param>
        /// <param name="sidedoer">sidedoer (required).</param>
        /// <param name="sidstOpdateret">Seneste tidspunkt hvor dette objekt blev opdateret  (required).</param>
        /// <param name="sidstValideret">sidstValideret.</param>
        /// <param name="vejkode">vejkode (required).</param>
        /// <param name="vejnavn">vejnavn (required).</param>
        public VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse(string adresseId = default(string), string bogstavFra = default(string), string bogstavTil = default(string), string bynavn = default(string), string conavn = default(string), string etage = default(string), string fritekst = default(string), int? husnummerFra = default(int?), int? husnummerTil = default(int?), AdresseKommune kommune = default(AdresseKommune), string landekode = default(string), Periode periode = default(Periode), string postboks = default(string), string postdistrikt = default(string), int? postnummer = default(int?), string sidedoer = default(string), string sidstOpdateret = default(string), DateTime? sidstValideret = default(DateTime?), int? vejkode = default(int?), string vejnavn = default(string))
        {
            // to ensure "bogstavFra" is required (not null)
            if (bogstavFra == null)
            {
                throw new ArgumentNullException("bogstavFra is a required property for VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse and cannot be null");
            }
            this.BogstavFra = bogstavFra;
            // to ensure "bogstavTil" is required (not null)
            if (bogstavTil == null)
            {
                throw new ArgumentNullException("bogstavTil is a required property for VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse and cannot be null");
            }
            this.BogstavTil = bogstavTil;
            // to ensure "bynavn" is required (not null)
            if (bynavn == null)
            {
                throw new ArgumentNullException("bynavn is a required property for VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse and cannot be null");
            }
            this.Bynavn = bynavn;
            // to ensure "conavn" is required (not null)
            if (conavn == null)
            {
                throw new ArgumentNullException("conavn is a required property for VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse and cannot be null");
            }
            this.Conavn = conavn;
            // to ensure "etage" is required (not null)
            if (etage == null)
            {
                throw new ArgumentNullException("etage is a required property for VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse and cannot be null");
            }
            this.Etage = etage;
            // to ensure "fritekst" is required (not null)
            if (fritekst == null)
            {
                throw new ArgumentNullException("fritekst is a required property for VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse and cannot be null");
            }
            this.Fritekst = fritekst;
            // to ensure "husnummerFra" is required (not null)
            if (husnummerFra == null)
            {
                throw new ArgumentNullException("husnummerFra is a required property for VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse and cannot be null");
            }
            this.HusnummerFra = husnummerFra;
            // to ensure "husnummerTil" is required (not null)
            if (husnummerTil == null)
            {
                throw new ArgumentNullException("husnummerTil is a required property for VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse and cannot be null");
            }
            this.HusnummerTil = husnummerTil;
            // to ensure "kommune" is required (not null)
            if (kommune == null)
            {
                throw new ArgumentNullException("kommune is a required property for VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse and cannot be null");
            }
            this.Kommune = kommune;
            // to ensure "landekode" is required (not null)
            if (landekode == null)
            {
                throw new ArgumentNullException("landekode is a required property for VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse and cannot be null");
            }
            this.Landekode = landekode;
            // to ensure "periode" is required (not null)
            if (periode == null)
            {
                throw new ArgumentNullException("periode is a required property for VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse and cannot be null");
            }
            this.Periode = periode;
            // to ensure "postboks" is required (not null)
            if (postboks == null)
            {
                throw new ArgumentNullException("postboks is a required property for VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse and cannot be null");
            }
            this.Postboks = postboks;
            // to ensure "postdistrikt" is required (not null)
            if (postdistrikt == null)
            {
                throw new ArgumentNullException("postdistrikt is a required property for VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse and cannot be null");
            }
            this.Postdistrikt = postdistrikt;
            // to ensure "postnummer" is required (not null)
            if (postnummer == null)
            {
                throw new ArgumentNullException("postnummer is a required property for VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse and cannot be null");
            }
            this.Postnummer = postnummer;
            // to ensure "sidedoer" is required (not null)
            if (sidedoer == null)
            {
                throw new ArgumentNullException("sidedoer is a required property for VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse and cannot be null");
            }
            this.Sidedoer = sidedoer;
            // to ensure "sidstOpdateret" is required (not null)
            if (sidstOpdateret == null)
            {
                throw new ArgumentNullException("sidstOpdateret is a required property for VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse and cannot be null");
            }
            this.SidstOpdateret = sidstOpdateret;
            // to ensure "vejkode" is required (not null)
            if (vejkode == null)
            {
                throw new ArgumentNullException("vejkode is a required property for VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse and cannot be null");
            }
            this.Vejkode = vejkode;
            // to ensure "vejnavn" is required (not null)
            if (vejnavn == null)
            {
                throw new ArgumentNullException("vejnavn is a required property for VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse and cannot be null");
            }
            this.Vejnavn = vejnavn;
            this.AdresseId = adresseId;
            this.SidstValideret = sidstValideret;
        }

        /// <summary>
        /// DAWA adresse id. Vil kun eksistere for danske adresser. Se https://dawadocs.dataforsyningen.dk/dok/api/adresse#opslag for mere information. Bonus information: DAWA id&#39;er er unikke for _den givne fysiske lokation_ og ændrer sig ikke, hvis eksempelvis vejen omdøbes eller bliver tilknyttet en ny kommune. 
        /// </summary>
        /// <value>DAWA adresse id. Vil kun eksistere for danske adresser. Se https://dawadocs.dataforsyningen.dk/dok/api/adresse#opslag for mere information. Bonus information: DAWA id&#39;er er unikke for _den givne fysiske lokation_ og ændrer sig ikke, hvis eksempelvis vejen omdøbes eller bliver tilknyttet en ny kommune. </value>
        /// <example>9ef42ca2-0055-47f3-91f2-fe9231ea2b8b</example>
        [DataMember(Name = "adresseId", EmitDefaultValue = true)]
        public string AdresseId { get; set; }

        /// <summary>
        /// Gets or Sets BogstavFra
        /// </summary>
        /// <example>A</example>
        [DataMember(Name = "bogstavFra", IsRequired = true, EmitDefaultValue = true)]
        public string BogstavFra { get; set; }

        /// <summary>
        /// Gets or Sets BogstavTil
        /// </summary>
        /// <example>B</example>
        [DataMember(Name = "bogstavTil", IsRequired = true, EmitDefaultValue = true)]
        public string BogstavTil { get; set; }

        /// <summary>
        /// Gets or Sets Bynavn
        /// </summary>
        /// <example>Bording</example>
        [DataMember(Name = "bynavn", IsRequired = true, EmitDefaultValue = true)]
        public string Bynavn { get; set; }

        /// <summary>
        /// Gets or Sets Conavn
        /// </summary>
        /// <example>Postboks 250</example>
        [DataMember(Name = "conavn", IsRequired = true, EmitDefaultValue = true)]
        public string Conavn { get; set; }

        /// <summary>
        /// Gets or Sets Etage
        /// </summary>
        /// <example>st</example>
        [DataMember(Name = "etage", IsRequired = true, EmitDefaultValue = true)]
        public string Etage { get; set; }

        /// <summary>
        /// Gets or Sets Fritekst
        /// </summary>
        /// <example>1501 Southbank Tower London SE1 9EY</example>
        [DataMember(Name = "fritekst", IsRequired = true, EmitDefaultValue = true)]
        public string Fritekst { get; set; }

        /// <summary>
        /// Gets or Sets HusnummerFra
        /// </summary>
        /// <example>10</example>
        [DataMember(Name = "husnummerFra", IsRequired = true, EmitDefaultValue = true)]
        public int? HusnummerFra { get; set; }

        /// <summary>
        /// Gets or Sets HusnummerTil
        /// </summary>
        /// <example>22</example>
        [DataMember(Name = "husnummerTil", IsRequired = true, EmitDefaultValue = true)]
        public int? HusnummerTil { get; set; }

        /// <summary>
        /// Gets or Sets Kommune
        /// </summary>
        [DataMember(Name = "kommune", IsRequired = true, EmitDefaultValue = true)]
        public AdresseKommune Kommune { get; set; }

        /// <summary>
        /// Gets or Sets Landekode
        /// </summary>
        /// <example>DK</example>
        [DataMember(Name = "landekode", IsRequired = true, EmitDefaultValue = true)]
        public string Landekode { get; set; }

        /// <summary>
        /// Gets or Sets Periode
        /// </summary>
        [DataMember(Name = "periode", IsRequired = true, EmitDefaultValue = true)]
        public Periode Periode { get; set; }

        /// <summary>
        /// Gets or Sets Postboks
        /// </summary>
        /// <example>1440</example>
        [DataMember(Name = "postboks", IsRequired = true, EmitDefaultValue = true)]
        public string Postboks { get; set; }

        /// <summary>
        /// Gets or Sets Postdistrikt
        /// </summary>
        /// <example>Gudbjerg Sydfyn</example>
        [DataMember(Name = "postdistrikt", IsRequired = true, EmitDefaultValue = true)]
        public string Postdistrikt { get; set; }

        /// <summary>
        /// Gets or Sets Postnummer
        /// </summary>
        /// <example>7741</example>
        [DataMember(Name = "postnummer", IsRequired = true, EmitDefaultValue = true)]
        public int? Postnummer { get; set; }

        /// <summary>
        /// Gets or Sets Sidedoer
        /// </summary>
        /// <example>tv</example>
        [DataMember(Name = "sidedoer", IsRequired = true, EmitDefaultValue = true)]
        public string Sidedoer { get; set; }

        /// <summary>
        /// Seneste tidspunkt hvor dette objekt blev opdateret 
        /// </summary>
        /// <value>Seneste tidspunkt hvor dette objekt blev opdateret </value>
        /// <example>2020-04-08T00:10:47.000Z</example>
        [DataMember(Name = "sidstOpdateret", IsRequired = true, EmitDefaultValue = true)]
        public string SidstOpdateret { get; set; }

        /// <summary>
        /// Gets or Sets SidstValideret
        /// </summary>
        /// <example>2022-07-18T03:39:09.942Z</example>
        [DataMember(Name = "sidstValideret", EmitDefaultValue = true)]
        public DateTime? SidstValideret { get; set; }

        /// <summary>
        /// Gets or Sets Vejkode
        /// </summary>
        /// <example>420</example>
        [DataMember(Name = "vejkode", IsRequired = true, EmitDefaultValue = true)]
        public int? Vejkode { get; set; }

        /// <summary>
        /// Gets or Sets Vejnavn
        /// </summary>
        /// <example>Pøllegårdsvej</example>
        [DataMember(Name = "vejnavn", IsRequired = true, EmitDefaultValue = true)]
        public string Vejnavn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VirksomhedVirksomhedMetadataNyesteBeliggenhedsadresse {\n");
            sb.Append("  AdresseId: ").Append(AdresseId).Append("\n");
            sb.Append("  BogstavFra: ").Append(BogstavFra).Append("\n");
            sb.Append("  BogstavTil: ").Append(BogstavTil).Append("\n");
            sb.Append("  Bynavn: ").Append(Bynavn).Append("\n");
            sb.Append("  Conavn: ").Append(Conavn).Append("\n");
            sb.Append("  Etage: ").Append(Etage).Append("\n");
            sb.Append("  Fritekst: ").Append(Fritekst).Append("\n");
            sb.Append("  HusnummerFra: ").Append(HusnummerFra).Append("\n");
            sb.Append("  HusnummerTil: ").Append(HusnummerTil).Append("\n");
            sb.Append("  Kommune: ").Append(Kommune).Append("\n");
            sb.Append("  Landekode: ").Append(Landekode).Append("\n");
            sb.Append("  Periode: ").Append(Periode).Append("\n");
            sb.Append("  Postboks: ").Append(Postboks).Append("\n");
            sb.Append("  Postdistrikt: ").Append(Postdistrikt).Append("\n");
            sb.Append("  Postnummer: ").Append(Postnummer).Append("\n");
            sb.Append("  Sidedoer: ").Append(Sidedoer).Append("\n");
            sb.Append("  SidstOpdateret: ").Append(SidstOpdateret).Append("\n");
            sb.Append("  SidstValideret: ").Append(SidstValideret).Append("\n");
            sb.Append("  Vejkode: ").Append(Vejkode).Append("\n");
            sb.Append("  Vejnavn: ").Append(Vejnavn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
