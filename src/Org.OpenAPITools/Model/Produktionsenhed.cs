/*
 * cvr.dev API dokumentation
 *
 * # Introduktion Velkommen til [cvr.dev](https://cvr.dev)'s HTTP API dokumentation.  Dette dokument beskriver, hvordan du kan benytte vores API til at hente CVR-data. Vi henter og cacher data fra Virks CVR-database en gang i minuttet, så vi altid kan levere så nøjagtig data som muligt.  Udover at være beskrevet på denne sige, er vores API også [beskrevet i OpenAPI 3.0 format](https://docs.cvr.dev/cvrdev_openapi.yml) og som [Postman-dokumentation](https://documenter.getpostman.com/view/13435475/TVejiqUr).  For at benytte vores API skal du have en [cvr.dev-konto](https://cvr.dev/#/auth/signup) med et aktivt abonnement, som du kan [prøve gratis de første 30 dage](https://cvr.dev/#/prices). 
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Produktionsenhed
    /// </summary>
    [DataContract(Name = "Produktionsenhed")]
    public partial class Produktionsenhed : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Produktionsenhed" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Produktionsenhed() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Produktionsenhed" /> class.
        /// </summary>
        /// <param name="aarsbeskaeftigelse">Information vedr. antallet af tilknyttede årsværk og ansatte for et givent år  (required).</param>
        /// <param name="attributter">Værdier, der er tilknyttet en entitet. Det kan være næsten hvad som helst; kontaktoplysninger, adresser, numeriske værdier, selskabers formål mv. Betydningen af de forskellige attributter bør kunne tydes fra konteksten  (required).</param>
        /// <param name="beliggenhedsadresse">Fysiske adresser, som oftest i Danmark  (required).</param>
        /// <param name="bibranche1">Information om eksisterende branchekoder kan findes på: https://erst.virk.dk/branchekode/kategori/indexKategori  (required).</param>
        /// <param name="bibranche2">Information om eksisterende branchekoder kan findes på: https://erst.virk.dk/branchekode/kategori/indexKategori  (required).</param>
        /// <param name="bibranche3">Information om eksisterende branchekoder kan findes på: https://erst.virk.dk/branchekode/kategori/indexKategori  (required).</param>
        /// <param name="brancheAnsvarskode">Værdier som Danmarks Statistik kan anføre på virksomheder, der falder ind under forskellige interessekategorier  (required).</param>
        /// <param name="dataAdgang">Beskriver hvorvidt enheden bliver replikeret gennem myndighedskanaler til SKAT og Danmarks Statistik  (required).</param>
        /// <param name="deltagerRelation">Beskriver relationer som Produktionsenheden har .</param>
        /// <param name="elektroniskPost">Kontaktoplysninger. Vær opmærksom på at disse ligger under for kravet om reklamebeskyttelse. [Se afsnittet om reklamebeskyttelse](/#tag/Reklamebeskyttelse)  (required).</param>
        /// <param name="enhedsNummer">Et unikt id, der identificerer en given enhed i CVR. Enhedsnumre benyttes ofte til at indikere relationer mellem enheder. Dog benyttes CVR-numre og P-numre også  (required).</param>
        /// <param name="enhedstype">Enhedstypen bør altid være PRODUKTIONSENHED for produktionsenheder  (required).</param>
        /// <param name="erstMaanedsbeskaeftigelse">Information vedr. antallet af tilknyttede årsværk og ansatte for en given måned .</param>
        /// <param name="fejlBeskrivelse">fejlBeskrivelse (required).</param>
        /// <param name="fejlRegistreret">Er sat hvis produktionsenheden er indlæst grundet en systemfejl hos Virk  (required).</param>
        /// <param name="fejlVedIndlaesning">Er sat hvis der under indlæsning i Virk&#39;s indeks opstod en fejl  (required).</param>
        /// <param name="hovedbranche">Information om eksisterende branchekoder kan findes på: https://erst.virk.dk/branchekode/kategori/indexKategori  (required).</param>
        /// <param name="kvartalsbeskaeftigelse">Information vedr. antallet af tilknyttede årsværk og ansatte for et givent kvartal  (required).</param>
        /// <param name="livsforloeb">livsforloeb (required).</param>
        /// <param name="naermesteFremtidigeDato">naermesteFremtidigeDato (required).</param>
        /// <param name="navne">Navne tilknyttet den givne enhed  (required).</param>
        /// <param name="pNummer">Det offentligt benyttede id, der unikt idenetificerer en produktionsenhed  (required).</param>
        /// <param name="postadresse">Fysiske adresser, som oftest i Danmark  (required).</param>
        /// <param name="produktionsEnhedMetadata">produktionsEnhedMetadata (required).</param>
        /// <param name="reklamebeskyttet">Hvorvidt enheden er reklamebeskyttet. Det er ulovligt lave reklamehenvendelser til virksomheder hvor denne værdi er sat. Læs mere: https://datacvr.virk.dk/artikel/vilkaar-og-betingelser#accordion-5-button  (required).</param>
        /// <param name="samtId">samtId (required).</param>
        /// <param name="sidstIndlaest">Seneste tidspunkt hvor dette objekt er blevet indlæst i Virks Elastic Search  (required).</param>
        /// <param name="sidstOpdateret">Seneste tidspunkt hvor dette objekt blev opdateret  (required).</param>
        /// <param name="telefaxNummer">Kontaktoplysninger. Vær opmærksom på at disse ligger under for kravet om reklamebeskyttelse. [Se afsnittet om reklamebeskyttelse](/#tag/Reklamebeskyttelse)  (required).</param>
        /// <param name="telefonNummer">Kontaktoplysninger. Vær opmærksom på at disse ligger under for kravet om reklamebeskyttelse. [Se afsnittet om reklamebeskyttelse](/#tag/Reklamebeskyttelse)  (required).</param>
        /// <param name="virkningsAktoer">virkningsAktoer.</param>
        /// <param name="virksomhedsrelation">Beskriver produktionsenhedens relation til den overliggende CVR-enhed  (required).</param>
        public Produktionsenhed(List<Aarsbeskaeftigelse> aarsbeskaeftigelse = default(List<Aarsbeskaeftigelse>), List<Attribut> attributter = default(List<Attribut>), List<Adresse> beliggenhedsadresse = default(List<Adresse>), List<Branche> bibranche1 = default(List<Branche>), List<Branche> bibranche2 = default(List<Branche>), List<Branche> bibranche3 = default(List<Branche>), long? brancheAnsvarskode = default(long?), int dataAdgang = default(int), List<ProduktionsenhedDeltagerRelationInner> deltagerRelation = default(List<ProduktionsenhedDeltagerRelationInner>), List<Kontaktoplysning> elektroniskPost = default(List<Kontaktoplysning>), long enhedsNummer = default(long), string enhedstype = default(string), List<Maanedsbeskaeftigelse> erstMaanedsbeskaeftigelse = default(List<Maanedsbeskaeftigelse>), string fejlBeskrivelse = default(string), bool fejlRegistreret = default(bool), bool fejlVedIndlaesning = default(bool), List<Branche> hovedbranche = default(List<Branche>), List<Kvartalsbeskaeftigelse> kvartalsbeskaeftigelse = default(List<Kvartalsbeskaeftigelse>), List<Livsforloeb> livsforloeb = default(List<Livsforloeb>), string naermesteFremtidigeDato = default(string), List<Navn> navne = default(List<Navn>), long pNummer = default(long), List<Adresse> postadresse = default(List<Adresse>), ProduktionsenhedProduktionsEnhedMetadata produktionsEnhedMetadata = default(ProduktionsenhedProduktionsEnhedMetadata), bool reklamebeskyttet = default(bool), long samtId = default(long), DateTime? sidstIndlaest = default(DateTime?), string sidstOpdateret = default(string), List<Kontaktoplysning> telefaxNummer = default(List<Kontaktoplysning>), List<Kontaktoplysning> telefonNummer = default(List<Kontaktoplysning>), string virkningsAktoer = default(string), List<ProduktionsenhedVirksomhedsrelationInner> virksomhedsrelation = default(List<ProduktionsenhedVirksomhedsrelationInner>))
        {
            // to ensure "aarsbeskaeftigelse" is required (not null)
            if (aarsbeskaeftigelse == null)
            {
                throw new ArgumentNullException("aarsbeskaeftigelse is a required property for Produktionsenhed and cannot be null");
            }
            this.Aarsbeskaeftigelse = aarsbeskaeftigelse;
            // to ensure "attributter" is required (not null)
            if (attributter == null)
            {
                throw new ArgumentNullException("attributter is a required property for Produktionsenhed and cannot be null");
            }
            this.Attributter = attributter;
            // to ensure "beliggenhedsadresse" is required (not null)
            if (beliggenhedsadresse == null)
            {
                throw new ArgumentNullException("beliggenhedsadresse is a required property for Produktionsenhed and cannot be null");
            }
            this.Beliggenhedsadresse = beliggenhedsadresse;
            // to ensure "bibranche1" is required (not null)
            if (bibranche1 == null)
            {
                throw new ArgumentNullException("bibranche1 is a required property for Produktionsenhed and cannot be null");
            }
            this.Bibranche1 = bibranche1;
            // to ensure "bibranche2" is required (not null)
            if (bibranche2 == null)
            {
                throw new ArgumentNullException("bibranche2 is a required property for Produktionsenhed and cannot be null");
            }
            this.Bibranche2 = bibranche2;
            // to ensure "bibranche3" is required (not null)
            if (bibranche3 == null)
            {
                throw new ArgumentNullException("bibranche3 is a required property for Produktionsenhed and cannot be null");
            }
            this.Bibranche3 = bibranche3;
            // to ensure "brancheAnsvarskode" is required (not null)
            if (brancheAnsvarskode == null)
            {
                throw new ArgumentNullException("brancheAnsvarskode is a required property for Produktionsenhed and cannot be null");
            }
            this.BrancheAnsvarskode = brancheAnsvarskode;
            this.DataAdgang = dataAdgang;
            // to ensure "elektroniskPost" is required (not null)
            if (elektroniskPost == null)
            {
                throw new ArgumentNullException("elektroniskPost is a required property for Produktionsenhed and cannot be null");
            }
            this.ElektroniskPost = elektroniskPost;
            this.EnhedsNummer = enhedsNummer;
            // to ensure "enhedstype" is required (not null)
            if (enhedstype == null)
            {
                throw new ArgumentNullException("enhedstype is a required property for Produktionsenhed and cannot be null");
            }
            this.Enhedstype = enhedstype;
            // to ensure "fejlBeskrivelse" is required (not null)
            if (fejlBeskrivelse == null)
            {
                throw new ArgumentNullException("fejlBeskrivelse is a required property for Produktionsenhed and cannot be null");
            }
            this.FejlBeskrivelse = fejlBeskrivelse;
            this.FejlRegistreret = fejlRegistreret;
            this.FejlVedIndlaesning = fejlVedIndlaesning;
            // to ensure "hovedbranche" is required (not null)
            if (hovedbranche == null)
            {
                throw new ArgumentNullException("hovedbranche is a required property for Produktionsenhed and cannot be null");
            }
            this.Hovedbranche = hovedbranche;
            // to ensure "kvartalsbeskaeftigelse" is required (not null)
            if (kvartalsbeskaeftigelse == null)
            {
                throw new ArgumentNullException("kvartalsbeskaeftigelse is a required property for Produktionsenhed and cannot be null");
            }
            this.Kvartalsbeskaeftigelse = kvartalsbeskaeftigelse;
            // to ensure "livsforloeb" is required (not null)
            if (livsforloeb == null)
            {
                throw new ArgumentNullException("livsforloeb is a required property for Produktionsenhed and cannot be null");
            }
            this.Livsforloeb = livsforloeb;
            // to ensure "naermesteFremtidigeDato" is required (not null)
            if (naermesteFremtidigeDato == null)
            {
                throw new ArgumentNullException("naermesteFremtidigeDato is a required property for Produktionsenhed and cannot be null");
            }
            this.NaermesteFremtidigeDato = naermesteFremtidigeDato;
            // to ensure "navne" is required (not null)
            if (navne == null)
            {
                throw new ArgumentNullException("navne is a required property for Produktionsenhed and cannot be null");
            }
            this.Navne = navne;
            this.PNummer = pNummer;
            // to ensure "postadresse" is required (not null)
            if (postadresse == null)
            {
                throw new ArgumentNullException("postadresse is a required property for Produktionsenhed and cannot be null");
            }
            this.Postadresse = postadresse;
            // to ensure "produktionsEnhedMetadata" is required (not null)
            if (produktionsEnhedMetadata == null)
            {
                throw new ArgumentNullException("produktionsEnhedMetadata is a required property for Produktionsenhed and cannot be null");
            }
            this.ProduktionsEnhedMetadata = produktionsEnhedMetadata;
            this.Reklamebeskyttet = reklamebeskyttet;
            this.SamtId = samtId;
            // to ensure "sidstIndlaest" is required (not null)
            if (sidstIndlaest == null)
            {
                throw new ArgumentNullException("sidstIndlaest is a required property for Produktionsenhed and cannot be null");
            }
            this.SidstIndlaest = sidstIndlaest;
            // to ensure "sidstOpdateret" is required (not null)
            if (sidstOpdateret == null)
            {
                throw new ArgumentNullException("sidstOpdateret is a required property for Produktionsenhed and cannot be null");
            }
            this.SidstOpdateret = sidstOpdateret;
            // to ensure "telefaxNummer" is required (not null)
            if (telefaxNummer == null)
            {
                throw new ArgumentNullException("telefaxNummer is a required property for Produktionsenhed and cannot be null");
            }
            this.TelefaxNummer = telefaxNummer;
            // to ensure "telefonNummer" is required (not null)
            if (telefonNummer == null)
            {
                throw new ArgumentNullException("telefonNummer is a required property for Produktionsenhed and cannot be null");
            }
            this.TelefonNummer = telefonNummer;
            // to ensure "virksomhedsrelation" is required (not null)
            if (virksomhedsrelation == null)
            {
                throw new ArgumentNullException("virksomhedsrelation is a required property for Produktionsenhed and cannot be null");
            }
            this.Virksomhedsrelation = virksomhedsrelation;
            this.DeltagerRelation = deltagerRelation;
            this.ErstMaanedsbeskaeftigelse = erstMaanedsbeskaeftigelse;
            this.VirkningsAktoer = virkningsAktoer;
        }

        /// <summary>
        /// Information vedr. antallet af tilknyttede årsværk og ansatte for et givent år 
        /// </summary>
        /// <value>Information vedr. antallet af tilknyttede årsværk og ansatte for et givent år </value>
        [DataMember(Name = "aarsbeskaeftigelse", IsRequired = true, EmitDefaultValue = true)]
        public List<Aarsbeskaeftigelse> Aarsbeskaeftigelse { get; set; }

        /// <summary>
        /// Værdier, der er tilknyttet en entitet. Det kan være næsten hvad som helst; kontaktoplysninger, adresser, numeriske værdier, selskabers formål mv. Betydningen af de forskellige attributter bør kunne tydes fra konteksten 
        /// </summary>
        /// <value>Værdier, der er tilknyttet en entitet. Det kan være næsten hvad som helst; kontaktoplysninger, adresser, numeriske værdier, selskabers formål mv. Betydningen af de forskellige attributter bør kunne tydes fra konteksten </value>
        [DataMember(Name = "attributter", IsRequired = true, EmitDefaultValue = true)]
        public List<Attribut> Attributter { get; set; }

        /// <summary>
        /// Fysiske adresser, som oftest i Danmark 
        /// </summary>
        /// <value>Fysiske adresser, som oftest i Danmark </value>
        [DataMember(Name = "beliggenhedsadresse", IsRequired = true, EmitDefaultValue = true)]
        public List<Adresse> Beliggenhedsadresse { get; set; }

        /// <summary>
        /// Information om eksisterende branchekoder kan findes på: https://erst.virk.dk/branchekode/kategori/indexKategori 
        /// </summary>
        /// <value>Information om eksisterende branchekoder kan findes på: https://erst.virk.dk/branchekode/kategori/indexKategori </value>
        [DataMember(Name = "bibranche1", IsRequired = true, EmitDefaultValue = true)]
        public List<Branche> Bibranche1 { get; set; }

        /// <summary>
        /// Information om eksisterende branchekoder kan findes på: https://erst.virk.dk/branchekode/kategori/indexKategori 
        /// </summary>
        /// <value>Information om eksisterende branchekoder kan findes på: https://erst.virk.dk/branchekode/kategori/indexKategori </value>
        [DataMember(Name = "bibranche2", IsRequired = true, EmitDefaultValue = true)]
        public List<Branche> Bibranche2 { get; set; }

        /// <summary>
        /// Information om eksisterende branchekoder kan findes på: https://erst.virk.dk/branchekode/kategori/indexKategori 
        /// </summary>
        /// <value>Information om eksisterende branchekoder kan findes på: https://erst.virk.dk/branchekode/kategori/indexKategori </value>
        [DataMember(Name = "bibranche3", IsRequired = true, EmitDefaultValue = true)]
        public List<Branche> Bibranche3 { get; set; }

        /// <summary>
        /// Værdier som Danmarks Statistik kan anføre på virksomheder, der falder ind under forskellige interessekategorier 
        /// </summary>
        /// <value>Værdier som Danmarks Statistik kan anføre på virksomheder, der falder ind under forskellige interessekategorier </value>
        /// <example>65</example>
        [DataMember(Name = "brancheAnsvarskode", IsRequired = true, EmitDefaultValue = true)]
        public long? BrancheAnsvarskode { get; set; }

        /// <summary>
        /// Beskriver hvorvidt enheden bliver replikeret gennem myndighedskanaler til SKAT og Danmarks Statistik 
        /// </summary>
        /// <value>Beskriver hvorvidt enheden bliver replikeret gennem myndighedskanaler til SKAT og Danmarks Statistik </value>
        /// <example>0</example>
        [DataMember(Name = "dataAdgang", IsRequired = true, EmitDefaultValue = true)]
        public int DataAdgang { get; set; }

        /// <summary>
        /// Beskriver relationer som Produktionsenheden har 
        /// </summary>
        /// <value>Beskriver relationer som Produktionsenheden har </value>
        [DataMember(Name = "deltagerRelation", EmitDefaultValue = false)]
        public List<ProduktionsenhedDeltagerRelationInner> DeltagerRelation { get; set; }

        /// <summary>
        /// Kontaktoplysninger. Vær opmærksom på at disse ligger under for kravet om reklamebeskyttelse. [Se afsnittet om reklamebeskyttelse](/#tag/Reklamebeskyttelse) 
        /// </summary>
        /// <value>Kontaktoplysninger. Vær opmærksom på at disse ligger under for kravet om reklamebeskyttelse. [Se afsnittet om reklamebeskyttelse](/#tag/Reklamebeskyttelse) </value>
        [DataMember(Name = "elektroniskPost", IsRequired = true, EmitDefaultValue = true)]
        public List<Kontaktoplysning> ElektroniskPost { get; set; }

        /// <summary>
        /// Et unikt id, der identificerer en given enhed i CVR. Enhedsnumre benyttes ofte til at indikere relationer mellem enheder. Dog benyttes CVR-numre og P-numre også 
        /// </summary>
        /// <value>Et unikt id, der identificerer en given enhed i CVR. Enhedsnumre benyttes ofte til at indikere relationer mellem enheder. Dog benyttes CVR-numre og P-numre også </value>
        /// <example>4009416462</example>
        [DataMember(Name = "enhedsNummer", IsRequired = true, EmitDefaultValue = true)]
        public long EnhedsNummer { get; set; }

        /// <summary>
        /// Enhedstypen bør altid være PRODUKTIONSENHED for produktionsenheder 
        /// </summary>
        /// <value>Enhedstypen bør altid være PRODUKTIONSENHED for produktionsenheder </value>
        /// <example>PRODUKTIONSENHED</example>
        [DataMember(Name = "enhedstype", IsRequired = true, EmitDefaultValue = true)]
        public string Enhedstype { get; set; }

        /// <summary>
        /// Information vedr. antallet af tilknyttede årsværk og ansatte for en given måned 
        /// </summary>
        /// <value>Information vedr. antallet af tilknyttede årsværk og ansatte for en given måned </value>
        [DataMember(Name = "erstMaanedsbeskaeftigelse", EmitDefaultValue = false)]
        public List<Maanedsbeskaeftigelse> ErstMaanedsbeskaeftigelse { get; set; }

        /// <summary>
        /// Gets or Sets FejlBeskrivelse
        /// </summary>
        [DataMember(Name = "fejlBeskrivelse", IsRequired = true, EmitDefaultValue = true)]
        public string FejlBeskrivelse { get; set; }

        /// <summary>
        /// Er sat hvis produktionsenheden er indlæst grundet en systemfejl hos Virk 
        /// </summary>
        /// <value>Er sat hvis produktionsenheden er indlæst grundet en systemfejl hos Virk </value>
        [DataMember(Name = "fejlRegistreret", IsRequired = true, EmitDefaultValue = true)]
        public bool FejlRegistreret { get; set; }

        /// <summary>
        /// Er sat hvis der under indlæsning i Virk&#39;s indeks opstod en fejl 
        /// </summary>
        /// <value>Er sat hvis der under indlæsning i Virk&#39;s indeks opstod en fejl </value>
        [DataMember(Name = "fejlVedIndlaesning", IsRequired = true, EmitDefaultValue = true)]
        public bool FejlVedIndlaesning { get; set; }

        /// <summary>
        /// Information om eksisterende branchekoder kan findes på: https://erst.virk.dk/branchekode/kategori/indexKategori 
        /// </summary>
        /// <value>Information om eksisterende branchekoder kan findes på: https://erst.virk.dk/branchekode/kategori/indexKategori </value>
        [DataMember(Name = "hovedbranche", IsRequired = true, EmitDefaultValue = true)]
        public List<Branche> Hovedbranche { get; set; }

        /// <summary>
        /// Information vedr. antallet af tilknyttede årsværk og ansatte for et givent kvartal 
        /// </summary>
        /// <value>Information vedr. antallet af tilknyttede årsværk og ansatte for et givent kvartal </value>
        [DataMember(Name = "kvartalsbeskaeftigelse", IsRequired = true, EmitDefaultValue = true)]
        public List<Kvartalsbeskaeftigelse> Kvartalsbeskaeftigelse { get; set; }

        /// <summary>
        /// Gets or Sets Livsforloeb
        /// </summary>
        [DataMember(Name = "livsforloeb", IsRequired = true, EmitDefaultValue = true)]
        public List<Livsforloeb> Livsforloeb { get; set; }

        /// <summary>
        /// Gets or Sets NaermesteFremtidigeDato
        /// </summary>
        /// <example>2102-05-11</example>
        [DataMember(Name = "naermesteFremtidigeDato", IsRequired = true, EmitDefaultValue = true)]
        public string NaermesteFremtidigeDato { get; set; }

        /// <summary>
        /// Navne tilknyttet den givne enhed 
        /// </summary>
        /// <value>Navne tilknyttet den givne enhed </value>
        [DataMember(Name = "navne", IsRequired = true, EmitDefaultValue = true)]
        public List<Navn> Navne { get; set; }

        /// <summary>
        /// Det offentligt benyttede id, der unikt idenetificerer en produktionsenhed 
        /// </summary>
        /// <value>Det offentligt benyttede id, der unikt idenetificerer en produktionsenhed </value>
        /// <example>1015115994</example>
        [DataMember(Name = "pNummer", IsRequired = true, EmitDefaultValue = true)]
        public long PNummer { get; set; }

        /// <summary>
        /// Fysiske adresser, som oftest i Danmark 
        /// </summary>
        /// <value>Fysiske adresser, som oftest i Danmark </value>
        [DataMember(Name = "postadresse", IsRequired = true, EmitDefaultValue = true)]
        public List<Adresse> Postadresse { get; set; }

        /// <summary>
        /// Gets or Sets ProduktionsEnhedMetadata
        /// </summary>
        [DataMember(Name = "produktionsEnhedMetadata", IsRequired = true, EmitDefaultValue = true)]
        public ProduktionsenhedProduktionsEnhedMetadata ProduktionsEnhedMetadata { get; set; }

        /// <summary>
        /// Hvorvidt enheden er reklamebeskyttet. Det er ulovligt lave reklamehenvendelser til virksomheder hvor denne værdi er sat. Læs mere: https://datacvr.virk.dk/artikel/vilkaar-og-betingelser#accordion-5-button 
        /// </summary>
        /// <value>Hvorvidt enheden er reklamebeskyttet. Det er ulovligt lave reklamehenvendelser til virksomheder hvor denne værdi er sat. Læs mere: https://datacvr.virk.dk/artikel/vilkaar-og-betingelser#accordion-5-button </value>
        /// <example>true</example>
        [DataMember(Name = "reklamebeskyttet", IsRequired = true, EmitDefaultValue = true)]
        public bool Reklamebeskyttet { get; set; }

        /// <summary>
        /// Gets or Sets SamtId
        /// </summary>
        /// <example>2</example>
        [DataMember(Name = "samtId", IsRequired = true, EmitDefaultValue = true)]
        public long SamtId { get; set; }

        /// <summary>
        /// Seneste tidspunkt hvor dette objekt er blevet indlæst i Virks Elastic Search 
        /// </summary>
        /// <value>Seneste tidspunkt hvor dette objekt er blevet indlæst i Virks Elastic Search </value>
        /// <example>2019-09-14T10:52:32+02:00</example>
        [DataMember(Name = "sidstIndlaest", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? SidstIndlaest { get; set; }

        /// <summary>
        /// Seneste tidspunkt hvor dette objekt blev opdateret 
        /// </summary>
        /// <value>Seneste tidspunkt hvor dette objekt blev opdateret </value>
        /// <example>2020-04-08T00:10:47.000Z</example>
        [DataMember(Name = "sidstOpdateret", IsRequired = true, EmitDefaultValue = true)]
        public string SidstOpdateret { get; set; }

        /// <summary>
        /// Kontaktoplysninger. Vær opmærksom på at disse ligger under for kravet om reklamebeskyttelse. [Se afsnittet om reklamebeskyttelse](/#tag/Reklamebeskyttelse) 
        /// </summary>
        /// <value>Kontaktoplysninger. Vær opmærksom på at disse ligger under for kravet om reklamebeskyttelse. [Se afsnittet om reklamebeskyttelse](/#tag/Reklamebeskyttelse) </value>
        [DataMember(Name = "telefaxNummer", IsRequired = true, EmitDefaultValue = true)]
        public List<Kontaktoplysning> TelefaxNummer { get; set; }

        /// <summary>
        /// Kontaktoplysninger. Vær opmærksom på at disse ligger under for kravet om reklamebeskyttelse. [Se afsnittet om reklamebeskyttelse](/#tag/Reklamebeskyttelse) 
        /// </summary>
        /// <value>Kontaktoplysninger. Vær opmærksom på at disse ligger under for kravet om reklamebeskyttelse. [Se afsnittet om reklamebeskyttelse](/#tag/Reklamebeskyttelse) </value>
        [DataMember(Name = "telefonNummer", IsRequired = true, EmitDefaultValue = true)]
        public List<Kontaktoplysning> TelefonNummer { get; set; }

        /// <summary>
        /// Gets or Sets VirkningsAktoer
        /// </summary>
        /// <example>PO</example>
        [DataMember(Name = "virkningsAktoer", EmitDefaultValue = true)]
        public string VirkningsAktoer { get; set; }

        /// <summary>
        /// Beskriver produktionsenhedens relation til den overliggende CVR-enhed 
        /// </summary>
        /// <value>Beskriver produktionsenhedens relation til den overliggende CVR-enhed </value>
        [DataMember(Name = "virksomhedsrelation", IsRequired = true, EmitDefaultValue = true)]
        public List<ProduktionsenhedVirksomhedsrelationInner> Virksomhedsrelation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Produktionsenhed {\n");
            sb.Append("  Aarsbeskaeftigelse: ").Append(Aarsbeskaeftigelse).Append("\n");
            sb.Append("  Attributter: ").Append(Attributter).Append("\n");
            sb.Append("  Beliggenhedsadresse: ").Append(Beliggenhedsadresse).Append("\n");
            sb.Append("  Bibranche1: ").Append(Bibranche1).Append("\n");
            sb.Append("  Bibranche2: ").Append(Bibranche2).Append("\n");
            sb.Append("  Bibranche3: ").Append(Bibranche3).Append("\n");
            sb.Append("  BrancheAnsvarskode: ").Append(BrancheAnsvarskode).Append("\n");
            sb.Append("  DataAdgang: ").Append(DataAdgang).Append("\n");
            sb.Append("  DeltagerRelation: ").Append(DeltagerRelation).Append("\n");
            sb.Append("  ElektroniskPost: ").Append(ElektroniskPost).Append("\n");
            sb.Append("  EnhedsNummer: ").Append(EnhedsNummer).Append("\n");
            sb.Append("  Enhedstype: ").Append(Enhedstype).Append("\n");
            sb.Append("  ErstMaanedsbeskaeftigelse: ").Append(ErstMaanedsbeskaeftigelse).Append("\n");
            sb.Append("  FejlBeskrivelse: ").Append(FejlBeskrivelse).Append("\n");
            sb.Append("  FejlRegistreret: ").Append(FejlRegistreret).Append("\n");
            sb.Append("  FejlVedIndlaesning: ").Append(FejlVedIndlaesning).Append("\n");
            sb.Append("  Hovedbranche: ").Append(Hovedbranche).Append("\n");
            sb.Append("  Kvartalsbeskaeftigelse: ").Append(Kvartalsbeskaeftigelse).Append("\n");
            sb.Append("  Livsforloeb: ").Append(Livsforloeb).Append("\n");
            sb.Append("  NaermesteFremtidigeDato: ").Append(NaermesteFremtidigeDato).Append("\n");
            sb.Append("  Navne: ").Append(Navne).Append("\n");
            sb.Append("  PNummer: ").Append(PNummer).Append("\n");
            sb.Append("  Postadresse: ").Append(Postadresse).Append("\n");
            sb.Append("  ProduktionsEnhedMetadata: ").Append(ProduktionsEnhedMetadata).Append("\n");
            sb.Append("  Reklamebeskyttet: ").Append(Reklamebeskyttet).Append("\n");
            sb.Append("  SamtId: ").Append(SamtId).Append("\n");
            sb.Append("  SidstIndlaest: ").Append(SidstIndlaest).Append("\n");
            sb.Append("  SidstOpdateret: ").Append(SidstOpdateret).Append("\n");
            sb.Append("  TelefaxNummer: ").Append(TelefaxNummer).Append("\n");
            sb.Append("  TelefonNummer: ").Append(TelefonNummer).Append("\n");
            sb.Append("  VirkningsAktoer: ").Append(VirkningsAktoer).Append("\n");
            sb.Append("  Virksomhedsrelation: ").Append(Virksomhedsrelation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
